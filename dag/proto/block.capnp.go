// Code generated by capnpc-go. DO NOT EDIT.

package block

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type Block capnp.Struct

// Block_TypeID is the unique identifier for the type Block.
const Block_TypeID = 0x92df2bd885bf4d5e

func NewBlock(s *capnp.Segment) (Block, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Block(st), err
}

func NewRootBlock(s *capnp.Segment) (Block, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Block(st), err
}

func ReadRootBlock(msg *capnp.Message) (Block, error) {
	root, err := msg.Root()
	return Block(root.Struct()), err
}

func (s Block) String() string {
	str, _ := text.Marshal(0x92df2bd885bf4d5e, capnp.Struct(s))
	return str
}

func (s Block) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Block) DecodeFromPtr(p capnp.Ptr) Block {
	return Block(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Block) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Block) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Block) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Block) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Block) Round() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Block) SetRound(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s Block) Signer() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Block) HasSigner() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Block) SetSigner(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s Block) Batches() (capnp.DataList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.DataList(p.List()), err
}

func (s Block) HasBatches() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Block) SetBatches(v capnp.DataList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewBatches sets the batches field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s Block) NewBatches(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s Block) Parents() (capnp.DataList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.DataList(p.List()), err
}

func (s Block) HasParents() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Block) SetParents(v capnp.DataList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewParents sets the parents field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s Block) NewParents(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// Block_List is a list of Block.
type Block_List = capnp.StructList[Block]

// NewBlock creates a new list of Block.
func NewBlock_List(s *capnp.Segment, sz int32) (Block_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[Block](l), err
}

// Block_Future is a wrapper for a Block promised by a client call.
type Block_Future struct{ *capnp.Future }

func (f Block_Future) Struct() (Block, error) {
	p, err := f.Future.Ptr()
	return Block(p.Struct()), err
}

const schema_ebe99359e631e3a9 = "x\xda\\\xc8\xb1J\xc3P\x14\x06\xe0\xff?7\xb5t" +
	"H\xe9\x85\xe0\xea\x03\x88\x96:vQ\xba\x0b=\xa3 " +
	"\xe2m\x12\xda\xd2\x90\x1b\xd2\x08.R\x17qW_\xc2" +
	"\xa7\xc8\xe4\xe8\xe0\xe6&((\xe2CD\xe2\xe8\xf4\xc1" +
	"7\xb8=\x0aFaM\x88F\x9d\xad\xe6\xec\xb8\xbey" +
	"\xdd}\xbb\x83n\x93\xcd\xe3\xc7\xe8\xf3\xe4\xfe\xfb\x07\x1d" +
	"\xd3\x05\xec\xd3\xbb}i}\xfe\xc2^\x93\xb8\xf9\xb0(" +
	"}%~8\xcb|\xbc\xda\x8f]\x91\x17\xe3I\xd6\xf5" +
	"\xf1jJ\xea\xc0\x04@@\xc0\xba\x03@O\x0du!" +
	"$#\xb6\x97\x8e\x01=7\xd4Lh\x85\x11\x05\xb0\xcb" +
	"\x09\xa0\x89\xa1^\x0b\xad\x91\x88\x06\xb0Wm^\x1a\xea" +
	"\x83p\xa7\xf4\x17y\xc2\x1e\x84=\xf0p\xbd\x9c\xe7i" +
	"\xc9\x10\xc2\x10\xdc\xcc\\\x15/\xd25\xfb\xe0\xd4\xf0\xaf" +
	"\xfb\xe0\xa6pe\x9aW\xff\xfb7\x00\x00\xff\xff$x" +
	"5\xa6"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_ebe99359e631e3a9,
		Nodes: []uint64{
			0x92df2bd885bf4d5e,
		},
		Compressed: true,
	})
}
